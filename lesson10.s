;
; File generated by cc65 v 2.16 - Git N/A
;
	.fopt		compiler,"cc65 v 2.16 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMI_flag
	.export		_Frame_Count
	.export		_index
	.export		_index4
	.export		_X1
	.export		_Y1
	.export		_state
	.export		_state4
	.export		_joypad1
	.export		_joypad1old
	.export		_joypad1test
	.export		_joypad2
	.export		_joypad2old
	.export		_joypad2test
	.export		_Horiz_scroll
	.export		_Horiz_scroll_Old
	.export		_Scroll_Adjusted_X
	.export		_Game_Mode
	.export		_Nametable
	.export		_NametableB
	.export		_walk_count
	.export		_X_speed
	.export		_Y_speed
	.export		_direction
	.export		_collision_Index
	.export		_high_byte
	.export		_collision
	.export		_collisionBot
	.export		_collisionOld
	.export		_temp
	.export		_SPRITES
	.export		_C_MAP
	.export		_C_MAP2
	.export		_HUD
	.export		_HUD2
	.export		_N1
	.export		_N2
	.export		_C1
	.export		_C2
	.export		_Title
	.export		_PLATFORM
	.export		_PALETTE
	.export		_Walk_Moves
	.export		_MetaSprite_Y
	.export		_MetaSprite_Tile_R
	.export		_MetaSprite_Attrib_R
	.export		_MetaSprite_X
	.export		_MetaSprite_Tile_L
	.export		_MetaSprite_Attrib_L
	.export		_Rotate_Palette
	.export		_All_Off
	.export		_All_On
	.export		_Reset_Scroll
	.export		_Load_Palette
	.export		_update_Sprites
	.export		_Collision_Down
	.export		_move_logic
	.export		_Draw_Background
	.export		_Draw_Title
	.import		_memcpy
	.import		_Wait_Vblank
	.import		_UnRLE
	.import		_Get_Input
	.export		_currentNote
	.export		_currentTick
	.export		_currentBar
	.export		_currentBeat
	.export		_currentSemiQ
	.export		_notes
	.export		_setupAudio
	.export		_audioUpdate
	.export		_audioBeep
	.export		_playSquare
	.export		_playTri
	.export		_playNoise
	.export		_sneezeSound
	.export		_bassLine
	.export		_bassNote
	.export		_main
	.export		_Palette_Fade

.segment	"DATA"

_currentNote:
	.byte	$00
_currentTick:
	.byte	$00
_currentBar:
	.byte	$00
_currentBeat:
	.byte	$00
_currentSemiQ:
	.byte	$00
_notes:
	.byte	$E0
	.byte	$A0
	.byte	$80
	.byte	$3E
	.byte	$0C
	.byte	$E3
	.byte	$B3
	.byte	$92
	.byte	$6F
	.byte	$4C
	.byte	$29
	.byte	$0A
	.byte	$EE
	.byte	$D2
	.byte	$B7
	.byte	$9F
	.byte	$88
	.byte	$70
	.byte	$5B
	.byte	$48
	.byte	$36
	.byte	$24
	.byte	$14
	.byte	$05
	.byte	$F6
	.byte	$E8
	.byte	$DB
	.byte	$CF
	.byte	$C3
	.byte	$B8
	.byte	$AF
	.byte	$A4
	.byte	$9B
	.byte	$92
	.byte	$8B
_bassLine:
	.byte	$06
	.byte	$01
	.byte	$06
	.byte	$01
_bassNote:
	.byte	$00

.segment	"RODATA"

_HUD:
	.byte	$53,$43,$4F,$52,$45,$3A,$00
_HUD2:
	.byte	$4C,$49,$56,$45,$53,$3A,$00
_N1:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$42
	.byte	$02
	.byte	$01
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$1D
	.byte	$0B
	.byte	$0C
	.byte	$02
	.byte	$01
	.byte	$1D
	.byte	$1B
	.byte	$1C
	.byte	$02
	.byte	$01
	.byte	$2F
	.byte	$F0
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$50
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$05
	.byte	$55
	.byte	$45
	.byte	$55
	.byte	$51
	.byte	$50
	.byte	$15
	.byte	$00
	.byte	$54
	.byte	$51
	.byte	$54
	.byte	$55
	.byte	$55
	.byte	$05
	.byte	$45
	.byte	$F0
	.byte	$F5
	.byte	$F5
	.byte	$35
	.byte	$F5
	.byte	$F1
	.byte	$F0
	.byte	$F0
	.byte	$0F
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$0F
	.byte	$01
	.byte	$02
	.byte	$0F
	.byte	$01
	.byte	$00
_N2:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$90
	.byte	$14
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$15
	.byte	$14
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$8D
	.byte	$05
	.byte	$06
	.byte	$01
	.byte	$09
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$09
	.byte	$17
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$14
	.byte	$14
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$09
	.byte	$17
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$14
	.byte	$14
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$09
	.byte	$17
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$08
	.byte	$14
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$08
	.byte	$14
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$18
	.byte	$19
	.byte	$01
	.byte	$09
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$02
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$50
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$55
	.byte	$55
	.byte	$15
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$F0
	.byte	$F0
	.byte	$F5
	.byte	$01
	.byte	$02
	.byte	$F0
	.byte	$01
	.byte	$02
	.byte	$0F
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
_C1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$0C
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_C2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Title:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$05
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$61
	.byte	$6E
	.byte	$67
	.byte	$65
	.byte	$6C
	.byte	$06
	.byte	$01
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$0D
	.byte	$17
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$15
	.byte	$16
	.byte	$16
	.byte	$69
	.byte	$6E
	.byte	$16
	.byte	$61
	.byte	$16
	.byte	$63
	.byte	$6F
	.byte	$61
	.byte	$74
	.byte	$16
	.byte	$01
	.byte	$02
	.byte	$17
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$18
	.byte	$19
	.byte	$01
	.byte	$0D
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$D1
	.byte	$70
	.byte	$92
	.byte	$85
	.byte	$93
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$73
	.byte	$94
	.byte	$81
	.byte	$92
	.byte	$94
	.byte	$00
	.byte	$01
	.byte	$72
	.byte	$70
	.byte	$85
	.byte	$97
	.byte	$94
	.byte	$85
	.byte	$92
	.byte	$00
	.byte	$70
	.byte	$89
	.byte	$87
	.byte	$85
	.byte	$8F
	.byte	$8E
	.byte	$93
	.byte	$00
	.byte	$01
	.byte	$34
	.byte	$80
	.byte	$01
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$80
	.byte	$01
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$32
	.byte	$30
	.byte	$31
	.byte	$37
	.byte	$00
	.byte	$01
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$00
_PLATFORM:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$32
_PALETTE:
	.byte	$22
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$39
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$0A
	.byte	$1A
	.byte	$2A
	.byte	$22
	.byte	$37
	.byte	$16
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$15
_Walk_Moves:
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
_MetaSprite_Y:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
_MetaSprite_Tile_R:
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$04
	.byte	$05
	.byte	$14
	.byte	$15
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
_MetaSprite_Attrib_R:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_MetaSprite_X:
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$08
_MetaSprite_Tile_L:
	.byte	$01
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$13
	.byte	$12
	.byte	$05
	.byte	$04
	.byte	$15
	.byte	$14
	.byte	$07
	.byte	$06
	.byte	$17
	.byte	$16
_MetaSprite_Attrib_L:
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
_Palette_Fade:
	.byte	$24
	.byte	$14
	.byte	$04
	.byte	$14

.segment	"BSS"

.segment	"ZEROPAGE"
_NMI_flag:
	.res	1,$00
_Frame_Count:
	.res	1,$00
_index:
	.res	1,$00
_index4:
	.res	1,$00
_X1:
	.res	1,$00
_Y1:
	.res	1,$00
_state:
	.res	1,$00
_state4:
	.res	1,$00
_joypad1:
	.res	1,$00
_joypad1old:
	.res	1,$00
_joypad1test:
	.res	1,$00
_joypad2:
	.res	1,$00
_joypad2old:
	.res	1,$00
_joypad2test:
	.res	1,$00
_Horiz_scroll:
	.res	1,$00
_Horiz_scroll_Old:
	.res	1,$00
_Scroll_Adjusted_X:
	.res	2,$00
_Game_Mode:
	.res	1,$00
_Nametable:
	.res	1,$00
_NametableB:
	.res	1,$00
_walk_count:
	.res	1,$00
_X_speed:
	.res	1,$00
_Y_speed:
	.res	1,$00
_direction:
	.res	1,$00
_collision_Index:
	.res	1,$00
_high_byte:
	.res	1,$00
_collision:
	.res	1,$00
_collisionBot:
	.res	1,$00
_collisionOld:
	.res	1,$00
_temp:
	.res	1,$00
.segment	"OAM"
_SPRITES:
	.res	256,$00
.segment	"MAP"
_C_MAP:
	.res	256,$00
_C_MAP2:
	.res	256,$00

; ---------------------------------------------------------------
; void __near__ Rotate_Palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Rotate_Palette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x0b;
;
	lda     #$0B
	sta     $2006
;
; PPU_DATA = Palette_Fade[(Frame_Count >> 2) & 0x03];
;
	lda     _Frame_Count
	lsr     a
	lsr     a
	and     #$03
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_Palette_Fade)
	sta     ptr1+1
	ldy     #<(_Palette_Fade)
	lda     (ptr1),y
	sta     $2007
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ All_Off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_Off: near

.segment	"CODE"

;
; PPU_CTRL = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0;
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ All_On (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_On: near

.segment	"CODE"

;
; PPU_CTRL = 0x90; // screen is on, NMI on
;
	lda     #$90
	sta     $2000
;
; PPU_MASK = 0x1e;
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Reset_Scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Reset_Scroll: near

.segment	"CODE"

;
; PPU_ADDRESS = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS = 0;
;
	sta     $2006
;
; SCROLL = 0;
;
	sta     $2005
;
; SCROLL = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Load_Palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Load_Palette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; for (index = 0; index < sizeof(PALETTE); ++index)
;
	sta     _index
L06EF:	lda     _index
	cmp     #$20
	bcs     L0690
;
; PPU_DATA = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for (index = 0; index < sizeof(PALETTE); ++index)
;
	inc     _index
	jmp     L06EF
;
; }
;
L0690:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_Sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_Sprites: near

.segment	"CODE"

;
; state4 = state << 2; // shift left 2 = multiply 4
;
	lda     _state
	asl     a
	asl     a
	sta     _state4
;
; index4 = 0;
;
	lda     #$00
	sta     _index4
;
; if (direction == 0)
;
	lda     _direction
	jne     L06FF
;
; for (index = 0; index < 4; ++index)
;
	sta     _index
L06FE:	lda     _index
	cmp     #$04
	bcc     L0701
;
; }
;
	rts
;
; SPRITES[index4] = MetaSprite_Y[index] + Y1; // relative y + master y
;
L0701:	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L048E
	inx
L048E:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Y1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Tile_R[index + state4]; // tile numbers
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0495
	inx
L0495:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _index
	clc
	adc     _state4
	bcc     L06F1
	inx
L06F1:	sta     ptr1
	txa
	clc
	adc     #>(_MetaSprite_Tile_R)
	sta     ptr1+1
	ldy     #<(_MetaSprite_Tile_R)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Attrib_R[index]; // attributes, all zero here
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L049B
	inx
L049B:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Attrib_R,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_X[index] + X1; // relative x + master x
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L04A2
	inx
L04A2:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _X1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;   
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Y[index] + Y1 + 16; // relative y + master y
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L04A9
	inx
L04A9:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Y1
	bcc     L06FC
	clc
L06FC:	adc     #$10
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Tile_R[index + state4]; // tile numbers
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L04B1
	inx
L04B1:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _index
	clc
	adc     _state4
	bcc     L06F4
	inx
L06F4:	sta     ptr1
	txa
	clc
	adc     #>(_MetaSprite_Tile_R)
	sta     ptr1+1
	ldy     #<(_MetaSprite_Tile_R)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Attrib_R[index]; // attributes, all zero here
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L04B7
	inx
L04B7:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Attrib_R,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_X[index] + X1; // relative x + master x
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L04BE
	inx
L04BE:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _X1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; for (index = 0; index < 4; ++index)
;
	inc     _index
	jmp     L06FE
;
; for (index = 0; index < 4; ++index)
;
L06FF:	lda     #$00
	sta     _index
L0700:	lda     _index
	cmp     #$04
	bcc     L0702
;
; }
;
	rts
;
; SPRITES[index4] = MetaSprite_Y[index] + Y1; // relative y + master y
;
L0702:	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L04CE
	inx
L04CE:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Y1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Tile_L[index + state4]; // tile numbers
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L04D5
	inx
L04D5:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _index
	clc
	adc     _state4
	bcc     L06F7
	inx
L06F7:	sta     ptr1
	txa
	clc
	adc     #>(_MetaSprite_Tile_L)
	sta     ptr1+1
	ldy     #<(_MetaSprite_Tile_L)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Attrib_L[index]; // attributes, all zero here
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L04DB
	inx
L04DB:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Attrib_L,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_X[index] + X1; // relative x + master x
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L04E2
	inx
L04E2:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _X1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;  
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Y[index] + Y1 + 16; // relative y + master y
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L04E9
	inx
L04E9:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Y1
	bcc     L06FD
	clc
L06FD:	adc     #$10
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Tile_L[index + state4]; // tile numbers
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L04F1
	inx
L04F1:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _index
	clc
	adc     _state4
	bcc     L06FA
	inx
L06FA:	sta     ptr1
	txa
	clc
	adc     #>(_MetaSprite_Tile_L)
	sta     ptr1+1
	ldy     #<(_MetaSprite_Tile_L)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Attrib_L[index]; // attributes, all zero here
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L04F7
	inx
L04F7:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Attrib_L,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_X[index] + X1; // relative x + master x
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L04FE
	inx
L04FE:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _X1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;  
;
	inc     _index4
;
; for (index = 0; index < 4; ++index)
;
	inc     _index
	jmp     L0700

.endproc

; ---------------------------------------------------------------
; void __near__ Collision_Down (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Collision_Down: near

.segment	"CODE"

;
; if (NametableB == 0)
;
	lda     _NametableB
	bne     L0504
;
; temp = C_MAP[collision_Index];
;
	ldy     _collision_Index
	lda     _C_MAP,y
;
; else
;
	jmp     L0708
;
; temp = C_MAP2[collision_Index];
;
L0504:	ldy     _collision_Index
	lda     _C_MAP2,y
L0708:	sta     _temp
;
; collision += PLATFORM[temp];
;
	ldy     _temp
	lda     _PLATFORM,y
	clc
	adc     _collision
	sta     _collision
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_logic (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_logic: near

.segment	"CODE"

;
; if ((joypad1 & (RIGHT | LEFT)) == 0)
;
	lda     _joypad1
	and     #$03
	bne     L071A
;
; walk_count = 0;
;
	sta     _walk_count
;
; if (X_speed >= 0)
;
	ldx     _X_speed
	bmi     L051F
;
; if (X_speed >= 4)
;
	lda     _X_speed
	sec
	sbc     #$04
	bvs     L0525
	eor     #$80
L0525:	asl     a
	lda     #$00
	bcc     L0719
;
; X_speed -= 4;
;
	lda     _X_speed
	sec
	sbc     #$04
	sta     _X_speed
	bpl     L071A
;
; else
;
	jmp     L071A
;
; if (X_speed <= (-4))
;
L051F:	lda     _X_speed
	sec
	sbc     #$FD
	bvc     L0531
	eor     #$80
L0531:	asl     a
	lda     #$00
	bcc     L0719
;
; X_speed += 4;
;
	lda     #$04
	clc
	adc     _X_speed
	sta     _X_speed
	bpl     L071A
;
; else
;
	jmp     L071A
;
; X_speed = 0;
;
L0719:	sta     _X_speed
;
; if ((joypad1 & RIGHT) != 0)
;
L071A:	lda     _joypad1
	and     #$01
	beq     L071B
;
; ++walk_count;
;
	inc     _walk_count
;
; direction = 0;
;
	lda     #$00
	sta     _direction
;
; if (X_speed >= 0)
;
	ldx     _X_speed
	bmi     L053F
;
; X_speed += 2;
;
	lda     #$02
	clc
	adc     _X_speed
	sta     _X_speed
	bpl     L071B
;
; else
;
	jmp     L071B
;
; X_speed += 8; // double friction
;
L053F:	lda     #$08
	clc
	adc     _X_speed
	sta     _X_speed
;
; if ((joypad1 & LEFT) != 0)
;
L071B:	lda     _joypad1
	and     #$02
	beq     L071D
;
; ++walk_count;
;
	inc     _walk_count
;
; direction = 1;
;
	lda     #$01
	sta     _direction
;
; if (X_speed <= 0)
;
	lda     _X_speed
	sec
	sbc     #$01
	bvc     L0553
	eor     #$80
L0553:	bpl     L071C
;
; X_speed -= 2;
;
	lda     _X_speed
	sec
	sbc     #$02
	sta     _X_speed
	bpl     L071D
;
; else
;
	jmp     L071D
;
; X_speed -= 8; // double friction
;
L071C:	lda     _X_speed
	sec
	sbc     #$08
	sta     _X_speed
;
; NametableB = Nametable;
;
L071D:	lda     _Nametable
	sta     _NametableB
;
; Scroll_Adjusted_X = (X1 + Horiz_scroll + 3); // left
;
	ldx     #$00
	lda     _X1
	clc
	adc     _Horiz_scroll
	bcc     L0714
	inx
	clc
L0714:	adc     #$03
	bcc     L0560
	inx
L0560:	sta     _Scroll_Adjusted_X
	stx     _Scroll_Adjusted_X+1
;
; high_byte = Scroll_Adjusted_X >> 8;
;
	lda     _Scroll_Adjusted_X+1
	sta     _high_byte
;
; if (high_byte != 0)
;
	lda     _high_byte
	beq     L071F
;
; ++NametableB; // the other nametable's collision map
;
	inc     _NametableB
;
; NametableB &= 1; // keep it 0 or 1
;
	lda     _NametableB
	and     #$01
	sta     _NametableB
;
; collision = 0;
;
	lda     #$00
L071F:	sta     _collision
;
; collisionBot = 0;
;
	sta     _collisionBot
;
; collision_Index = (((char)Scroll_Adjusted_X >> 4) + ((Y1 + 32) & 0xf0)); //bottom left
;
	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y1
	clc
	adc     #$20
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; Collision_Down();
;
	jsr     _Collision_Down
;
; collisionBot += collision;            // if on platform, ++collision
;
	lda     _collision
	clc
	adc     _collisionBot
	sta     _collisionBot
;
; collision_Index = (((char)Scroll_Adjusted_X >> 4) + ((Y1)&0xf0)); //top left
;
	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y1
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; Collision_Down();
;
	jsr     _Collision_Down
;
; NametableB = Nametable;
;
	lda     _Nametable
	sta     _NametableB
;
; Scroll_Adjusted_X = (X1 + Horiz_scroll + 13); // left
;
	ldx     #$00
	lda     _X1
	clc
	adc     _Horiz_scroll
	bcc     L0715
	inx
	clc
L0715:	adc     #$0D
	bcc     L0582
	inx
L0582:	sta     _Scroll_Adjusted_X
	stx     _Scroll_Adjusted_X+1
;
; high_byte = Scroll_Adjusted_X >> 8;
;
	lda     _Scroll_Adjusted_X+1
	sta     _high_byte
;
; if (high_byte != 0)
;
	lda     _high_byte
	beq     L0720
;
; ++NametableB; // the other nametable's collision map
;
	inc     _NametableB
;
; NametableB &= 1; // keep it 0 or 1
;
	lda     _NametableB
	and     #$01
	sta     _NametableB
;
; collisionOld = collision;
;
L0720:	lda     _collision
	sta     _collisionOld
;
; collision = 0;
;
	lda     #$00
	sta     _collision
;
; collision_Index = (((char)Scroll_Adjusted_X >> 4) + ((Y1 + 32) & 0xf0)); //bottom right
;
	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y1
	clc
	adc     #$20
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; Collision_Down();               // if on platform, ++collision
;
	jsr     _Collision_Down
;
; collisionBot += collision;
;
	lda     _collision
	clc
	adc     _collisionBot
	sta     _collisionBot
;
; collision = collisionOld+collision;
;
	lda     _collisionOld
	clc
	adc     _collision
	sta     _collision
;
; collision_Index = (((char)Scroll_Adjusted_X >> 4) + ((Y1)&0xf0)); //top right
;
	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y1
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; Collision_Down();              // if on platform, ++collision
;
	jsr     _Collision_Down
;
; if (collision >= 50)
;
	lda     _collision
	cmp     #$32
	bcc     L0721
;
; Y1 = 0x70;
;
	lda     #$70
	sta     _Y1
;
; Horiz_scroll = 0x80;
;
	lda     #$80
	sta     _Horiz_scroll
;
; NametableB = Nametable;
;
	lda     _Nametable
	sta     _NametableB
;
; return;
;
	rts
;
; if (Y_speed >= 0)
;
L0721:	ldx     _Y_speed
	bmi     L05A9
;
; if ((Y1 & 0x0f) > 1) // only platform collide if nearly aligned to a metatile
;
	lda     _Y1
	and     #$0F
	cmp     #$02
	bcc     L0722
;
; collisionBot = 0;
;
	lda     #$00
	sta     _collisionBot
;
; if (collisionBot == 0)
;
L0722:	lda     _collisionBot
	bne     L0723
;
; Y_speed += 4; // gravity
;
	lda     #$04
	clc
	adc     _Y_speed
	sta     _Y_speed
	bpl     L0727
;
; else
;
	jmp     L0727
;
; Y_speed = 0; // collision = stop falling
;
L0723:	lda     #$00
	sta     _Y_speed
;
; Y1 &= 0xf0;  // align to the metatile
;
	lda     _Y1
	and     #$F0
;
; else
;
	jmp     L073F
;
; Y_speed += 4;
;
L05A9:	lda     #$04
	clc
	adc     _Y_speed
	sta     _Y_speed
;
; if (collision < 5 && collision > 0)
;
	lda     _collision
	cmp     #$05
	bcs     L0727
	lda     _collision
	beq     L0727
;
; Y_speed = 1;
;
	lda     #$01
	sta     _Y_speed
;
; Y1 += 2;
;
	lda     #$02
	clc
	adc     _Y1
L073F:	sta     _Y1
;
; if (collision > 0)
;
L0727:	lda     _collision
	beq     L072B
;
; if (((joypad1 & A_BUTTON) != 0) && ((joypad1old & A_BUTTON) == 0))
;
	lda     _joypad1
	and     #$80
	beq     L072B
	lda     _joypad1old
	and     #$80
	bne     L072B
;
; Y_speed = -0x48; // 0xc8
;
	lda     #$B8
	sta     _Y_speed
;
; if(collision > 0)
;
	lda     _collision
	beq     L072B
;
; playNoise(0x0D);
;
	lda     #$0D
	jsr     _playNoise
;
; if (X_speed >= 0)
;
L072B:	ldx     _X_speed
	bmi     L05D9
;
; if (X_speed > 0x20)
;
	lda     _X_speed
	sec
	sbc     #$21
	bvs     L05DF
	eor     #$80
L05DF:	bpl     L072C
;
; X_speed = 0x20;
;
	lda     #$20
;
; else
;
	jmp     L0712
;
; if (X_speed < (-0x20))
;
L05D9:	lda     _X_speed
	sec
	sbc     #$E0
	bvc     L05E7
	eor     #$80
L05E7:	bpl     L072C
;
; X_speed = (-0x20); // 0xe0
;
	lda     #$E0
L0712:	sta     _X_speed
;
; if (Y_speed >= 0)
;
L072C:	ldx     _Y_speed
	bmi     L072D
;
; if (Y_speed > 0x20)
;
	lda     _Y_speed
	sec
	sbc     #$21
	bvs     L05F1
	eor     #$80
L05F1:	bpl     L072D
;
; Y_speed = 0x20;
;
	lda     #$20
	sta     _Y_speed
;
; if (X_speed != 0)
;
L072D:	lda     _X_speed
	jeq     L0636
;
; Horiz_scroll_Old = Horiz_scroll;
;
	lda     _Horiz_scroll
	sta     _Horiz_scroll_Old
;
; Horiz_scroll += (X_speed >> 4); // use the high nibble
;
	ldx     #$00
	lda     _X_speed
	bpl     L05FC
	dex
L05FC:	jsr     asrax4
	clc
	adc     _Horiz_scroll
	sta     _Horiz_scroll
;
; NametableB = Nametable;
;
	lda     _Nametable
	sta     _NametableB
;
; Scroll_Adjusted_X = (X1 + Horiz_scroll + (X_speed < 0 ? 3 : 13)); // left
;
	ldx     #$00
	lda     _X1
	clc
	adc     _Horiz_scroll
	bcc     L070C
	inx
L070C:	sta     ptr1
	stx     ptr1+1
	lda     _X_speed
	asl     a
	bcc     L072E
	lda     #$03
	jmp     L0606
L072E:	lda     #$0D
L0606:	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L070D
	inx
L070D:	sta     _Scroll_Adjusted_X
	stx     _Scroll_Adjusted_X+1
;
; high_byte = Scroll_Adjusted_X >> 8;
;
	lda     _Scroll_Adjusted_X+1
	sta     _high_byte
;
; if (high_byte != 0)
;
	lda     _high_byte
	beq     L0730
;
; ++NametableB; // the other nametable's collision map
;
	inc     _NametableB
;
; NametableB &= 1; // keep it 0 or 1
;
	lda     _NametableB
	and     #$01
	sta     _NametableB
;
; collision = 0;                      // if on platform, ++collision
;
	lda     #$00
L0730:	sta     _collision
;
; collision_Index = (((char)Scroll_Adjusted_X >> 4) + ((Y1 + (Y_speed <= 0 ? 31 : 32)) & 0xf0)); //top left if on ground / falling, bottom left if in air
;
	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y_speed
	sec
	sbc     #$01
	bvc     L0619
	eor     #$80
L0619:	bpl     L0731
	lda     #$1F
	jmp     L061C
L0731:	lda     #$20
L061C:	clc
	adc     _Y1
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; Collision_Down();
;
	jsr     _Collision_Down
;
; collision_Index = (((char)Scroll_Adjusted_X >> 4) + ((Y1 + 16) & 0xf0)); //top left if on ground / falling, bottom left if in air
;
	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y1
	clc
	adc     #$10
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; Collision_Down();
;
	jsr     _Collision_Down
;
; collision_Index = (((char)Scroll_Adjusted_X >> 4) + ((Y1) & 0xf0)); //top left if on ground / falling, bottom left if in air
;
	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y1
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; Collision_Down();
;
	jsr     _Collision_Down
;
; if (collision < 5 && collision > 0)
;
	lda     _collision
	cmp     #$05
	bcs     L0735
	lda     _collision
	beq     L0735
;
; Horiz_scroll = Horiz_scroll_Old;
;
	lda     _Horiz_scroll_Old
	sta     _Horiz_scroll
;
; X_speed = 0;
;
	ldx     #$00
	stx     _X_speed
;
; else
;
	jmp     L0737
;
; if (X_speed >= 0)
;
L0735:	ldx     _X_speed
	bmi     L0637
;
; if (Horiz_scroll_Old > Horiz_scroll) // if pass 0, switch nametables
;
	lda     _Horiz_scroll_Old
	sec
	sbc     _Horiz_scroll
	bcc     L0736
	beq     L0736
;
; else
;
	jmp     L0740
;
; if (Horiz_scroll_Old < Horiz_scroll)
;
L0637:	lda     _Horiz_scroll_Old
	cmp     _Horiz_scroll
	bcs     L0736
;
; ++Nametable; // if pass 0, switch nametables
;
L0740:	inc     _Nametable
;
; Nametable &= 1; // keep it 1 or 0
;
L0736:	lda     _Nametable
	and     #$01
	sta     _Nametable
;
; Y1 += (Y_speed >> 4); // use the high nibble
;
L0636:	ldx     #$00
L0737:	lda     _Y_speed
	bpl     L0646
	dex
L0646:	jsr     asrax4
	clc
	adc     _Y1
	sta     _Y1
;
; if (walk_count > 0x1f) // walk_count forced 0-1f
;
	lda     _walk_count
	cmp     #$20
	ldx     #$00
	bcc     L0738
;
; walk_count = 0;
;
	stx     _walk_count
;
; state = Walk_Moves[(walk_count >> 3)]; // if not jumping
;
L0738:	lda     _walk_count
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	txa
	clc
	adc     #>(_Walk_Moves)
	sta     ptr1+1
	ldy     #<(_Walk_Moves)
	lda     (ptr1),y
	sta     _state
;
; if (Y_speed < 0) // negative = jumping
;
	lda     _Y_speed
	asl     a
	bcc     L064F
;
; state = 3;
;
	lda     #$03
	sta     _state
;
; }
;
L064F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Background: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x20; // address of nametable #0 = 0x2000
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(N1); // uncompresses our data
;
	lda     #<(_N1)
	ldx     #>(_N1)
	jsr     _UnRLE
;
; PPU_ADDRESS = 0x24; // address of nametable #1 = 0x2400
;
	lda     #$24
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(N2); // uncompresses our data
;
	lda     #<(_N2)
	ldx     #>(_N2)
	jsr     _UnRLE
;
; memcpy(C_MAP, C1, 240);
;
	lda     #<(_C_MAP)
	ldx     #>(_C_MAP)
	jsr     pushax
	lda     #<(_C1)
	ldx     #>(_C1)
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; memcpy(C_MAP2, C2, 240);
;
	lda     #<(_C_MAP2)
	ldx     #>(_C_MAP2)
	jsr     pushax
	lda     #<(_C2)
	ldx     #>(_C2)
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Title: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x20; // address of nametable #0 = 0x2000
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(Title); // uncompresses our data
;
	lda     #<(_Title)
	ldx     #>(_Title)
	jsr     _UnRLE
;
; PPU_ADDRESS = 0x24; // draw the HUD on opposite nametable
;
	lda     #$24
	sta     $2006
;
; PPU_ADDRESS = 0x64;
;
	lda     #$64
	sta     $2006
;
; for (index = 0; index < sizeof(HUD); ++index)
;
	lda     #$00
	sta     _index
L0741:	lda     _index
	cmp     #$07
	bcs     L0742
;
; PPU_DATA = HUD[index];
;
	ldy     _index
	lda     _HUD,y
	sta     $2007
;
; for (index = 0; index < sizeof(HUD); ++index)
;
	inc     _index
	jmp     L0741
;
; PPU_ADDRESS = 0x24;
;
L0742:	lda     #$24
	sta     $2006
;
; PPU_ADDRESS = 0x74;
;
	lda     #$74
	sta     $2006
;
; for (index = 0; index < sizeof(HUD); ++index)
;
	lda     #$00
	sta     _index
L0743:	lda     _index
	cmp     #$07
	bcs     L0744
;
; PPU_DATA = HUD2[index];
;
	ldy     _index
	lda     _HUD2,y
	sta     $2007
;
; for (index = 0; index < sizeof(HUD); ++index)
;
	inc     _index
	jmp     L0743
;
; PPU_ADDRESS = 0x27;
;
L0744:	lda     #$27
	sta     $2006
;
; PPU_ADDRESS = 0xc0;
;
	lda     #$C0
	sta     $2006
;
; for (index = 0; index < 8; ++index)
;
	lda     #$00
	sta     _index
L0745:	lda     _index
	cmp     #$08
	bcs     L06E5
;
; PPU_DATA = 0xff;
;
	lda     #$FF
	sta     $2007
;
; for (index = 0; index < 8; ++index)
;
	inc     _index
	jmp     L0745
;
; }
;
L06E5:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setupAudio (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setupAudio: near

.segment	"CODE"

;
; *((unsigned char*)0x4015) = 0x0f;
;
	lda     #$0F
	sta     $4015
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ audioUpdate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_audioUpdate: near

.segment	"CODE"

;
; ++currentTick;
;
	inc     _currentTick
;
; if(currentTick >= 24)
;
	lda     _currentTick
	cmp     #$18
	bcc     L03CC
;
; currentTick = 0;
;
	lda     #$00
	sta     _currentTick
;
; ++bassNote;
;
	inc     _bassNote
;
; playSquare(bassLine[bassNote], SQUARE_ONE);
;
	ldy     _bassNote
	lda     _bassLine,y
	jsr     pusha
	lda     #$00
	jsr     _playSquare
;
; if(bassNote > 3) 
;
	lda     _bassNote
	cmp     #$04
	bcc     L0746
;
; bassNote = 0;
;
	lda     #$00
	sta     _bassNote
;
; if(bassNote == 1) sneezeSound();
;
L0746:	lda     _bassNote
	cmp     #$01
	jeq     _sneezeSound
;
; }
;
L03CC:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ audioBeep (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_audioBeep: near

.segment	"CODE"

;
; if ((joypad1 & A_BUTTON) != 0){
;
	lda     _joypad1
	and     #$80
	beq     L03D0
;
; *((unsigned char*)0x4000) = 0x0f;
;
	lda     #$0F
	sta     $4000
;
; *((unsigned char*)0x4003) = 0x01;
;
	lda     #$01
	sta     $4003
;
; }
;
L03D0:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ playSquare (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playSquare: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; voice *= 4;
;
	ldy     #$00
	lda     (sp),y
	asl     a
	asl     a
	sta     (sp),y
;
; *((unsigned char*)(0x4000 + voice)) = 0x8f;
;
	sta     ptr1
	tya
	clc
	adc     #$40
	sta     ptr1+1
	lda     #$8F
	sta     (ptr1),y
;
; *((unsigned char*)(0x4001 + voice)) = 0x00;
;
	lda     (sp),y
	clc
	adc     #$01
	sta     ptr1
	tya
	adc     #$40
	sta     ptr1+1
	tya
	sta     (ptr1),y
;
; *((unsigned char*)(0x4002 + voice)) = notes[note];
;
	lda     (sp),y
	clc
	adc     #$02
	pha
	tya
	adc     #$40
	tax
	pla
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tay
	lda     _notes,y
	ldy     #$00
	jsr     staspidx
;
; if(note < 5)   *((unsigned char*)(0x4003 + voice)) = 0x13;
;
	ldy     #$01
	lda     (sp),y
	cmp     #$05
	bcs     L0749
	dey
	lda     (sp),y
	clc
	adc     #$03
	sta     ptr1
	tya
	adc     #$40
	sta     ptr1+1
	lda     #$13
;
; else if(note < 12)  *((unsigned char*)(0x4003 + voice)) = 0x12;
;
	jmp     L0747
L0749:	lda     (sp),y
	cmp     #$0C
	bcs     L074B
	dey
	lda     (sp),y
	clc
	adc     #$03
	sta     ptr1
	tya
	adc     #$40
	sta     ptr1+1
	lda     #$12
;
; else if(note < 24)  *((unsigned char*)(0x4003 + voice)) = 0x11;
;
	jmp     L0747
L074B:	lda     (sp),y
	cmp     #$18
	bcs     L03F9
	dey
	lda     (sp),y
	clc
	adc     #$03
	sta     ptr1
	tya
	adc     #$40
	sta     ptr1+1
	lda     #$11
;
; else     *((unsigned char*)(0x4003 + voice)) = 0x10;
;
	jmp     L0747
L03F9:	dey
	lda     (sp),y
	clc
	adc     #$03
	sta     ptr1
	tya
	adc     #$40
	sta     ptr1+1
	lda     #$10
L0747:	sta     (ptr1),y
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ playTri (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playTri: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; *((unsigned char*)0x4008) = 0x7f;
;
	lda     #$7F
	sta     $4008
;
; *((unsigned char*)0x400a) = notes[note];
;
	ldy     #$00
	lda     (sp),y
	tay
	lda     _notes,y
	sta     $400A
;
; if(note < 5)   *((unsigned char*)0x400b) = 0x13;
;
	ldy     #$00
	lda     (sp),y
	cmp     #$05
	bcs     L074E
	lda     #$13
;
; else if(note < 12)  *((unsigned char*)0x400b) = 0x12;
;
	jmp     L074C
L074E:	lda     (sp),y
	cmp     #$0C
	bcs     L0750
	lda     #$12
;
; else if(note < 24)  *((unsigned char*)0x400b) = 0x11;
;
	jmp     L074C
L0750:	lda     (sp),y
	cmp     #$18
	bcs     L0751
	lda     #$11
;
; else     *((unsigned char*)0x400b) = 0x10;
;
	jmp     L074C
L0751:	lda     #$10
L074C:	sta     $400B
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ playNoise (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playNoise: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; *((uchar*)0x400c) = 0x0f;
;
	lda     #$0F
	sta     $400C
;
; *((uchar*)0x400e) = note | 0x40;
;
	ldy     #$00
	lda     (sp),y
	ora     #$40
	sta     $400E
;
; *((uchar*)0x400f) = 0xF8;
;
	lda     #$F8
	sta     $400F
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ sneezeSound (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sneezeSound: near

.segment	"CODE"

;
; *((uchar*)0x400c) = 0x0f;
;
	lda     #$0F
	sta     $400C
;
; *((uchar*)0x400e) = 13 | 0x40;
;
	lda     #$4D
	sta     $400E
;
; *((uchar*)0x400f) = 0xF0;
;
	lda     #$F0
	sta     $400F
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; All_Off();
;
	jsr     _All_Off
;
; Draw_Title();
;
	jsr     _Draw_Title
;
; joypad1 = 0xff; // fix a bug, reset is wiping joypad1old
;
	lda     #$FF
	sta     _joypad1
;
; Load_Palette();
;
	jsr     _Load_Palette
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; setupAudio();
;
	jsr     _setupAudio
;
; Wait_Vblank();
;
	jsr     _Wait_Vblank
;
; All_On();
;
	jsr     _All_On
;
; while (Game_Mode == TITLE_MODE)
;
	jmp     L0758
;
; while (NMI_flag == 0)
;
L0752:	lda     _NMI_flag
	beq     L0752
;
; Rotate_Palette();
;
	jsr     _Rotate_Palette
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; Get_Input();
;
	jsr     _Get_Input
;
; if (((joypad1old & START) == 0) && ((joypad1 & START) != 0))
;
	lda     _joypad1old
	and     #$10
	bne     L075B
	lda     _joypad1
	and     #$10
	beq     L075C
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; while (NMI_flag == 0)
;
L0755:	lda     _NMI_flag
	beq     L0755
;
; All_Off();
;
	jsr     _All_Off
;
; Game_Mode = RUN_GAME_MODE;
;
	lda     #$01
	sta     _Game_Mode
;
; Draw_Background();
;
	jsr     _Draw_Background
;
; X1 = 0x80;
;
	lda     #$80
	sta     _X1
;
; Y1 = 0x70; // middle of screen
;
	lda     #$70
	sta     _Y1
;
; Load_Palette();
;
	jsr     _Load_Palette
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; Wait_Vblank();
;
	jsr     _Wait_Vblank
;
; PPU_CTRL = 0x91;
;
	lda     #$91
	sta     $2000
;
; NMI_flag = 0;
;
L075B:	lda     #$00
L075C:	sta     _NMI_flag
;
; while (Game_Mode == TITLE_MODE)
;
L0758:	lda     _Game_Mode
	beq     L0752
;
; while (Game_Mode == RUN_GAME_MODE)
;
	jmp     L075A
;
; while (NMI_flag == 0)
;
L0759:	lda     _NMI_flag
	beq     L0759
;
; Get_Input();
;
	jsr     _Get_Input
;
; move_logic();
;
	jsr     _move_logic
;
; audioUpdate();
;
	jsr     _audioUpdate
;
; update_Sprites();
;
	jsr     _update_Sprites
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; while (Game_Mode == RUN_GAME_MODE)
;
L075A:	lda     _Game_Mode
	cmp     #$01
	beq     L0759
;
; while (1)
;
	jmp     L0758

.endproc

