;
; File generated by cc65 v 2.16 - Git cdca644
;
	.fopt		compiler,"cc65 v 2.16 - Git cdca644"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMI_flag
	.export		_PPU_flag
	.export		_PPU_flag2
	.export		_PPU_ADDRESS_High
	.export		_PPU_ADDRESS_Low
	.export		_Frame_Count
	.export		_index
	.export		_index2
	.export		_index3
	.export		_index4
	.export		_X1
	.export		_Y1
	.export		_state
	.export		_state4
	.export		_joypad1
	.export		_joypad1old
	.export		_joypad1test
	.export		_joypad2
	.export		_joypad2old
	.export		_joypad2test
	.export		_Horiz_scroll
	.export		_Horiz_scroll_Old
	.export		_Scroll_Adjusted_X
	.export		_Game_Mode
	.export		_Nametable
	.export		_NametableB
	.export		_Nametable_Plus
	.export		_walk_count
	.export		_X_speed
	.export		_Y_speed
	.export		_direction
	.export		_collision_Index
	.export		_high_byte
	.export		_collision
	.export		_collisionBot
	.export		_collisionOld
	.export		_temp
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_Horiz_scroll_Plus
	.export		_SPRITE_ZERO
	.export		_SPRITES
	.export		_C_MAP
	.export		_C_MAP2
	.export		_BUFFER1
	.export		_BUFFER2
	.export		_BUFFER3
	.export		_BUFFER4
	.export		_BUFFER5
	.export		_BUFFER6
	.export		_BUFFER7
	.export		_HUD
	.export		_HUD2
	.export		_N1
	.export		_N2
	.export		_C1
	.export		_C2
	.export		_Title
	.export		_PLATFORM
	.export		_PALETTE
	.export		_METATILES
	.export		_MT_color
	.export		_Walk_Moves
	.export		_MetaSprite_Y
	.export		_MetaSprite_Tile_R
	.export		_MetaSprite_Attrib_R
	.export		_MetaSprite_X
	.export		_MetaSprite_Tile_L
	.export		_MetaSprite_Attrib_L
	.export		_Rotate_Palette
	.export		_Do_Buffer2
	.export		_Do_Buffer3
	.export		_All_Off
	.export		_All_On
	.export		_Reset_Scroll
	.export		_Load_Palette
	.export		_update_Sprites
	.export		_Collision_Down
	.export		_move_logic
	.export		_Draw_Background
	.export		_Draw_Title
	.import		_Sprite_Zero
	.import		_Super_Fast_Write_PPU
	.import		_Super_Fast_Write_PPU2
	.import		_memcpy
	.import		_Wait_Vblank
	.import		_UnRLE
	.import		_Get_Input
	.export		_setupAudio
	.export		_audioUpdate
	.export		_audioBeep
	.export		_playScale
	.export		_Buffer_Tiles
	.export		_Buffer_Tiles2
	.export		_main
	.export		_Palette_Fade
	.export		_Do_Buffer
	.export		_Set_Sprite_Zero

.segment	"RODATA"

_HUD:
	.byte	$53,$43,$4F,$52,$45,$3A,$00
_HUD2:
	.byte	$4C,$49,$56,$45,$53,$3A,$00
_N1:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$42
	.byte	$02
	.byte	$01
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$1D
	.byte	$0B
	.byte	$0C
	.byte	$02
	.byte	$01
	.byte	$1D
	.byte	$1B
	.byte	$1C
	.byte	$02
	.byte	$01
	.byte	$2F
	.byte	$F0
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$50
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$05
	.byte	$55
	.byte	$45
	.byte	$55
	.byte	$51
	.byte	$50
	.byte	$15
	.byte	$00
	.byte	$54
	.byte	$51
	.byte	$54
	.byte	$55
	.byte	$55
	.byte	$05
	.byte	$45
	.byte	$F0
	.byte	$F5
	.byte	$F5
	.byte	$35
	.byte	$F5
	.byte	$F1
	.byte	$F0
	.byte	$F0
	.byte	$0F
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$0F
	.byte	$01
	.byte	$02
	.byte	$0F
	.byte	$01
	.byte	$00
_N2:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$90
	.byte	$14
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$15
	.byte	$14
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$8D
	.byte	$05
	.byte	$06
	.byte	$01
	.byte	$09
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$09
	.byte	$17
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$14
	.byte	$14
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$09
	.byte	$17
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$14
	.byte	$14
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$09
	.byte	$17
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$08
	.byte	$14
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$08
	.byte	$14
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$18
	.byte	$19
	.byte	$01
	.byte	$09
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$02
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$50
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$55
	.byte	$55
	.byte	$15
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$F0
	.byte	$F0
	.byte	$F5
	.byte	$01
	.byte	$02
	.byte	$F0
	.byte	$01
	.byte	$02
	.byte	$0F
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
_C1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$0C
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_C2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Title:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$05
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$61
	.byte	$6E
	.byte	$67
	.byte	$65
	.byte	$6C
	.byte	$06
	.byte	$01
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$15
	.byte	$16
	.byte	$01
	.byte	$0D
	.byte	$17
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$15
	.byte	$16
	.byte	$16
	.byte	$69
	.byte	$6E
	.byte	$16
	.byte	$61
	.byte	$16
	.byte	$63
	.byte	$6F
	.byte	$61
	.byte	$74
	.byte	$16
	.byte	$01
	.byte	$02
	.byte	$17
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$18
	.byte	$19
	.byte	$01
	.byte	$0D
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$D1
	.byte	$70
	.byte	$92
	.byte	$85
	.byte	$93
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$73
	.byte	$94
	.byte	$81
	.byte	$92
	.byte	$94
	.byte	$00
	.byte	$01
	.byte	$72
	.byte	$70
	.byte	$85
	.byte	$97
	.byte	$94
	.byte	$85
	.byte	$92
	.byte	$00
	.byte	$70
	.byte	$89
	.byte	$87
	.byte	$85
	.byte	$8F
	.byte	$8E
	.byte	$93
	.byte	$00
	.byte	$01
	.byte	$34
	.byte	$80
	.byte	$01
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$80
	.byte	$01
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$32
	.byte	$30
	.byte	$31
	.byte	$37
	.byte	$00
	.byte	$01
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$00
_PLATFORM:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$32
_PALETTE:
	.byte	$22
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$39
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$0A
	.byte	$1A
	.byte	$2A
	.byte	$22
	.byte	$37
	.byte	$16
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$15
_METATILES:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$05
	.byte	$06
	.byte	$15
	.byte	$16
	.byte	$06
	.byte	$06
	.byte	$16
	.byte	$16
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
	.byte	$15
	.byte	$16
	.byte	$15
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$15
	.byte	$16
	.byte	$18
	.byte	$19
	.byte	$16
	.byte	$16
	.byte	$19
	.byte	$19
	.byte	$16
	.byte	$17
	.byte	$19
	.byte	$1A
_MT_color:
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Walk_Moves:
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
_MetaSprite_Y:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
_MetaSprite_Tile_R:
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$04
	.byte	$05
	.byte	$14
	.byte	$15
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
_MetaSprite_Attrib_R:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_MetaSprite_X:
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$08
_MetaSprite_Tile_L:
	.byte	$01
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$13
	.byte	$12
	.byte	$05
	.byte	$04
	.byte	$15
	.byte	$14
	.byte	$07
	.byte	$06
	.byte	$17
	.byte	$16
_MetaSprite_Attrib_L:
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
_Palette_Fade:
	.byte	$24
	.byte	$14
	.byte	$04
	.byte	$14

.segment	"BSS"

.segment	"ZEROPAGE"
_NMI_flag:
	.res	1,$00
_PPU_flag:
	.res	1,$00
_PPU_flag2:
	.res	1,$00
_PPU_ADDRESS_High:
	.res	1,$00
_PPU_ADDRESS_Low:
	.res	1,$00
_Frame_Count:
	.res	1,$00
_index:
	.res	1,$00
_index2:
	.res	1,$00
_index3:
	.res	1,$00
_index4:
	.res	1,$00
_X1:
	.res	1,$00
_Y1:
	.res	1,$00
_state:
	.res	1,$00
_state4:
	.res	1,$00
_joypad1:
	.res	1,$00
_joypad1old:
	.res	1,$00
_joypad1test:
	.res	1,$00
_joypad2:
	.res	1,$00
_joypad2old:
	.res	1,$00
_joypad2test:
	.res	1,$00
_Horiz_scroll:
	.res	1,$00
_Horiz_scroll_Old:
	.res	1,$00
_Scroll_Adjusted_X:
	.res	2,$00
_Game_Mode:
	.res	1,$00
_Nametable:
	.res	1,$00
_NametableB:
	.res	1,$00
_Nametable_Plus:
	.res	1,$00
_walk_count:
	.res	1,$00
_X_speed:
	.res	1,$00
_Y_speed:
	.res	1,$00
_direction:
	.res	1,$00
_collision_Index:
	.res	1,$00
_high_byte:
	.res	1,$00
_collision:
	.res	1,$00
_collisionBot:
	.res	1,$00
_collisionOld:
	.res	1,$00
_temp:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_Horiz_scroll_Plus:
	.res	1,$00
.segment	"OAM"
_SPRITE_ZERO:
	.res	4,$00
_SPRITES:
	.res	252,$00
.segment	"MAP"
_C_MAP:
	.res	256,$00
_C_MAP2:
	.res	256,$00
.segment	"BSS"
_BUFFER1:
	.res	32,$00
_BUFFER2:
	.res	32,$00
_BUFFER3:
	.res	32,$00
_BUFFER4:
	.res	32,$00
_BUFFER5:
	.res	8,$00
_BUFFER6:
	.res	8,$00
_BUFFER7:
	.res	8,$00

; ---------------------------------------------------------------
; void __near__ Rotate_Palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Rotate_Palette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x0b;
;
	lda     #$0B
	sta     $2006
;
; PPU_DATA = Palette_Fade[(Frame_Count >> 2) & 0x03];
;
	lda     _Frame_Count
	lsr     a
	lsr     a
	and     #$03
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_Palette_Fade)
	sta     ptr1+1
	ldy     #<(_Palette_Fade)
	lda     (ptr1),y
	sta     $2007
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Do_Buffer2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Do_Buffer2: near

.segment	"CODE"

;
; if (Nametable_Plus == 0)
;
	lda     _Nametable_Plus
	bne     L07FC
;
; PPU_ADDRESS_High = 0x24;
;
	lda     #$24
;
; else
;
	jmp     L07FB
;
; PPU_ADDRESS_High = 0x20;
;
L07FC:	lda     #$20
L07FB:	sta     _PPU_ADDRESS_High
;
; PPU_ADDRESS_Low = ((Horiz_scroll_Plus & 0xf0) >> 3) + 0x80; // +80 because we're skipping the top
;
	lda     _Horiz_scroll_Plus
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _PPU_ADDRESS_Low
;
; PPU_ADDRESS = PPU_ADDRESS_High;
;
	lda     _PPU_ADDRESS_High
	sta     $2006
;
; PPU_ADDRESS = PPU_ADDRESS_Low;
;
	lda     _PPU_ADDRESS_Low
	sta     $2006
;
; Super_Fast_Write_PPU();
;
	jmp     _Super_Fast_Write_PPU

.endproc

; ---------------------------------------------------------------
; void __near__ Do_Buffer3 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Do_Buffer3: near

.segment	"CODE"

;
; if (Nametable_Plus == 0)
;
	lda     _Nametable_Plus
	bne     L07FE
;
; PPU_ADDRESS_High = 0x24;
;
	lda     #$24
;
; else
;
	jmp     L07FD
;
; PPU_ADDRESS_High = 0x20;
;
L07FE:	lda     #$20
L07FD:	sta     _PPU_ADDRESS_High
;
; PPU_ADDRESS_Low = ((Horiz_scroll_Plus & 0xf0) >> 3) + 0x80; // +80 because we're skipping the top
;
	lda     _Horiz_scroll_Plus
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _PPU_ADDRESS_Low
;
; PPU_ADDRESS = PPU_ADDRESS_High;
;
	lda     _PPU_ADDRESS_High
	sta     $2006
;
; PPU_ADDRESS = PPU_ADDRESS_Low;
;
	lda     _PPU_ADDRESS_Low
	sta     $2006
;
; Super_Fast_Write_PPU2();
;
	jmp     _Super_Fast_Write_PPU2

.endproc

; ---------------------------------------------------------------
; void __near__ All_Off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_Off: near

.segment	"CODE"

;
; PPU_CTRL = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0;
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ All_On (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_On: near

.segment	"CODE"

;
; PPU_CTRL = 0x90; // screen is on, NMI on
;
	lda     #$90
	sta     $2000
;
; PPU_MASK = 0x1e;
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Reset_Scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Reset_Scroll: near

.segment	"CODE"

;
; PPU_ADDRESS = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS = 0;
;
	sta     $2006
;
; SCROLL = 0;
;
	sta     $2005
;
; SCROLL = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Load_Palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Load_Palette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; for (index = 0; index < sizeof(PALETTE); ++index)
;
	sta     _index
L07FF:	lda     _index
	cmp     #$20
	bcs     L0760
;
; PPU_DATA = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for (index = 0; index < sizeof(PALETTE); ++index)
;
	inc     _index
	jmp     L07FF
;
; }
;
L0760:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_Sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_Sprites: near

.segment	"CODE"

;
; state4 = state << 2; // shift left 2 = multiply 4
;
	lda     _state
	asl     a
	asl     a
	sta     _state4
;
; index4 = 1;
;
	lda     #$01
	sta     _index4
;
; if (direction == 0)
;
	lda     _direction
	jne     L080F
;
; for (index = 0; index < 4; ++index)
;
	sta     _index
L080E:	lda     _index
	cmp     #$04
	bcc     L0811
;
; }
;
	rts
;
; SPRITES[index4] = MetaSprite_Y[index] + Y1; // relative y + master y
;
L0811:	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L055F
	inx
L055F:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Y1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Tile_R[index + state4]; // tile numbers
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0566
	inx
L0566:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _index
	clc
	adc     _state4
	bcc     L0801
	inx
L0801:	sta     ptr1
	txa
	clc
	adc     #>(_MetaSprite_Tile_R)
	sta     ptr1+1
	ldy     #<(_MetaSprite_Tile_R)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Attrib_R[index]; // attributes, all zero here
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L056C
	inx
L056C:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Attrib_R,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_X[index] + X1; // relative x + master x
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0573
	inx
L0573:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _X1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Y[index] + Y1 + 16; // relative y + master y
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L057A
	inx
L057A:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Y1
	bcc     L080C
	clc
L080C:	adc     #$10
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Tile_R[index + state4]; // tile numbers
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0582
	inx
L0582:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _index
	clc
	adc     _state4
	bcc     L0804
	inx
L0804:	sta     ptr1
	txa
	clc
	adc     #>(_MetaSprite_Tile_R)
	sta     ptr1+1
	ldy     #<(_MetaSprite_Tile_R)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Attrib_R[index]; // attributes, all zero here
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0588
	inx
L0588:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Attrib_R,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_X[index] + X1; // relative x + master x
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L058F
	inx
L058F:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _X1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; for (index = 0; index < 4; ++index)
;
	inc     _index
	jmp     L080E
;
; for (index = 0; index < 4; ++index)
;
L080F:	lda     #$00
	sta     _index
L0810:	lda     _index
	cmp     #$04
	bcc     L0812
;
; }
;
	rts
;
; SPRITES[index4] = MetaSprite_Y[index] + Y1; // relative y + master y
;
L0812:	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L059F
	inx
L059F:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Y1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Tile_L[index + state4]; // tile numbers
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L05A6
	inx
L05A6:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _index
	clc
	adc     _state4
	bcc     L0807
	inx
L0807:	sta     ptr1
	txa
	clc
	adc     #>(_MetaSprite_Tile_L)
	sta     ptr1+1
	ldy     #<(_MetaSprite_Tile_L)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Attrib_L[index]; // attributes, all zero here
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L05AC
	inx
L05AC:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Attrib_L,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_X[index] + X1; // relative x + master x
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L05B3
	inx
L05B3:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _X1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Y[index] + Y1 + 16; // relative y + master y
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L05BA
	inx
L05BA:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Y1
	bcc     L080D
	clc
L080D:	adc     #$10
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Tile_L[index + state4]; // tile numbers
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L05C2
	inx
L05C2:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _index
	clc
	adc     _state4
	bcc     L080A
	inx
L080A:	sta     ptr1
	txa
	clc
	adc     #>(_MetaSprite_Tile_L)
	sta     ptr1+1
	ldy     #<(_MetaSprite_Tile_L)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Attrib_L[index]; // attributes, all zero here
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L05C8
	inx
L05C8:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Attrib_L,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_X[index] + X1; // relative x + master x
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L05CF
	inx
L05CF:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _X1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; for (index = 0; index < 4; ++index)
;
	inc     _index
	jmp     L0810

.endproc

; ---------------------------------------------------------------
; void __near__ Collision_Down (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Collision_Down: near

.segment	"CODE"

;
; if (NametableB == 0)
;
	lda     _NametableB
	bne     L05D5
;
; temp = C_MAP[collision_Index];
;
	ldy     _collision_Index
	lda     _C_MAP,y
;
; else
;
	jmp     L0818
;
; temp = C_MAP2[collision_Index];
;
L05D5:	ldy     _collision_Index
	lda     _C_MAP2,y
L0818:	sta     _temp
;
; collision += PLATFORM[temp];
;
	ldy     _temp
	lda     _PLATFORM,y
	clc
	adc     _collision
	sta     _collision
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_logic (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_logic: near

.segment	"CODE"

;
; if ((joypad1 & (RIGHT | LEFT)) == 0)
;
	lda     _joypad1
	and     #$03
	bne     L082B
;
; walk_count = 0;
;
	sta     _walk_count
;
; if (X_speed >= 0)
;
	ldx     _X_speed
	bmi     L05F0
;
; if (X_speed >= 4)
;
	lda     _X_speed
	sec
	sbc     #$04
	bvs     L05F6
	eor     #$80
L05F6:	asl     a
	lda     #$00
	bcc     L082A
;
; X_speed -= 4;
;
	lda     _X_speed
	sec
	sbc     #$04
	sta     _X_speed
	bpl     L082B
;
; else
;
	jmp     L082B
;
; if (X_speed <= (-4))
;
L05F0:	lda     _X_speed
	sec
	sbc     #$FD
	bvc     L0602
	eor     #$80
L0602:	asl     a
	lda     #$00
	bcc     L082A
;
; X_speed += 4;
;
	lda     #$04
	clc
	adc     _X_speed
	sta     _X_speed
	bpl     L082B
;
; else
;
	jmp     L082B
;
; X_speed = 0;
;
L082A:	sta     _X_speed
;
; if ((joypad1 & RIGHT) != 0)
;
L082B:	lda     _joypad1
	and     #$01
	beq     L082C
;
; ++walk_count;
;
	inc     _walk_count
;
; direction = 0;
;
	lda     #$00
	sta     _direction
;
; if (X_speed >= 0)
;
	ldx     _X_speed
	bmi     L0610
;
; X_speed += 2;
;
	lda     #$02
	clc
	adc     _X_speed
	sta     _X_speed
	bpl     L082C
;
; else
;
	jmp     L082C
;
; X_speed += 8; // double friction
;
L0610:	lda     #$08
	clc
	adc     _X_speed
	sta     _X_speed
;
; if ((joypad1 & LEFT) != 0)
;
L082C:	lda     _joypad1
	and     #$02
	beq     L082E
;
; ++walk_count;
;
	inc     _walk_count
;
; direction = 1;
;
	lda     #$01
	sta     _direction
;
; if (X_speed <= 0)
;
	lda     _X_speed
	sec
	sbc     #$01
	bvc     L0624
	eor     #$80
L0624:	bpl     L082D
;
; X_speed -= 2;
;
	lda     _X_speed
	sec
	sbc     #$02
	sta     _X_speed
	bpl     L082E
;
; else
;
	jmp     L082E
;
; X_speed -= 8; // double friction
;
L082D:	lda     _X_speed
	sec
	sbc     #$08
	sta     _X_speed
;
; NametableB = Nametable;
;
L082E:	lda     _Nametable
	sta     _NametableB
;
; Scroll_Adjusted_X = (X1 + Horiz_scroll + 3); // left
;
	ldx     #$00
	lda     _X1
	clc
	adc     _Horiz_scroll
	bcc     L0825
	inx
	clc
L0825:	adc     #$03
	bcc     L0631
	inx
L0631:	sta     _Scroll_Adjusted_X
	stx     _Scroll_Adjusted_X+1
;
; high_byte = Scroll_Adjusted_X >> 8;
;
	lda     _Scroll_Adjusted_X+1
	sta     _high_byte
;
; if (high_byte != 0)
;
	lda     _high_byte
	beq     L0830
;
; ++NametableB; // the other nametable's collision map
;
	inc     _NametableB
;
; NametableB &= 1; // keep it 0 or 1
;
	lda     _NametableB
	and     #$01
	sta     _NametableB
;
; collision = 0;
;
	lda     #$00
L0830:	sta     _collision
;
; collisionBot = 0;
;
	sta     _collisionBot
;
; collision_Index = (((char)Scroll_Adjusted_X >> 4) + ((Y1 + 32) & 0xf0)); //bottom left
;
	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y1
	clc
	adc     #$20
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; Collision_Down();
;
	jsr     _Collision_Down
;
; collisionBot += collision;            // if on platform, ++collision
;
	lda     _collision
	clc
	adc     _collisionBot
	sta     _collisionBot
;
; collision_Index = (((char)Scroll_Adjusted_X >> 4) + ((Y1)&0xf0)); //top left
;
	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y1
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; Collision_Down();
;
	jsr     _Collision_Down
;
; NametableB = Nametable;
;
	lda     _Nametable
	sta     _NametableB
;
; Scroll_Adjusted_X = (X1 + Horiz_scroll + 13); // left
;
	ldx     #$00
	lda     _X1
	clc
	adc     _Horiz_scroll
	bcc     L0826
	inx
	clc
L0826:	adc     #$0D
	bcc     L0653
	inx
L0653:	sta     _Scroll_Adjusted_X
	stx     _Scroll_Adjusted_X+1
;
; high_byte = Scroll_Adjusted_X >> 8;
;
	lda     _Scroll_Adjusted_X+1
	sta     _high_byte
;
; if (high_byte != 0)
;
	lda     _high_byte
	beq     L0831
;
; ++NametableB; // the other nametable's collision map
;
	inc     _NametableB
;
; NametableB &= 1; // keep it 0 or 1
;
	lda     _NametableB
	and     #$01
	sta     _NametableB
;
; collisionOld = collision;
;
L0831:	lda     _collision
	sta     _collisionOld
;
; collision = 0;
;
	lda     #$00
	sta     _collision
;
; collision_Index = (((char)Scroll_Adjusted_X >> 4) + ((Y1 + 32) & 0xf0)); //bottom right
;
	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y1
	clc
	adc     #$20
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; Collision_Down();               // if on platform, ++collision
;
	jsr     _Collision_Down
;
; collisionBot += collision;
;
	lda     _collision
	clc
	adc     _collisionBot
	sta     _collisionBot
;
; collision = collisionOld + collision;
;
	lda     _collisionOld
	clc
	adc     _collision
	sta     _collision
;
; collision_Index = (((char)Scroll_Adjusted_X >> 4) + ((Y1)&0xf0)); //top right
;
	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y1
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; Collision_Down();              // if on platform, ++collision
;
	jsr     _Collision_Down
;
; if (collision >= 50)
;
	lda     _collision
	cmp     #$32
	bcc     L0832
;
; Y1 = 0x70;
;
	lda     #$70
	sta     _Y1
;
; Horiz_scroll = 0x80;
;
	lda     #$80
	sta     _Horiz_scroll
;
; NametableB = Nametable;
;
	lda     _Nametable
	sta     _NametableB
;
; return;
;
	rts
;
; if (Y_speed >= 0)
;
L0832:	ldx     _Y_speed
	bmi     L067A
;
; if ((Y1 & 0x0f) > 1) // only platform collide if nearly aligned to a metatile
;
	lda     _Y1
	and     #$0F
	cmp     #$02
	bcc     L0833
;
; collisionBot = 0;
;
	lda     #$00
	sta     _collisionBot
;
; if (collisionBot == 0)
;
L0833:	lda     _collisionBot
	bne     L0834
;
; Y_speed += 4; // gravity
;
	lda     #$04
	clc
	adc     _Y_speed
	sta     _Y_speed
	bpl     L0838
;
; else
;
	jmp     L0838
;
; Y_speed = 0; // collision = stop falling
;
L0834:	lda     #$00
	sta     _Y_speed
;
; Y1 &= 0xf0;  // align to the metatile
;
	lda     _Y1
	and     #$F0
;
; else
;
	jmp     L084F
;
; Y_speed += 4;
;
L067A:	lda     #$04
	clc
	adc     _Y_speed
	sta     _Y_speed
;
; if (collision < 5 && collision > 0)
;
	lda     _collision
	cmp     #$05
	bcs     L0838
	lda     _collision
	beq     L0838
;
; Y_speed = 1;
;
	lda     #$01
	sta     _Y_speed
;
; Y1 += 2;
;
	lda     #$02
	clc
	adc     _Y1
L084F:	sta     _Y1
;
; if (collision > 0)
;
L0838:	lda     _collision
	beq     L083C
;
; if (((joypad1 & A_BUTTON) != 0) && ((joypad1old & A_BUTTON) == 0))
;
	lda     _joypad1
	and     #$80
	beq     L083C
	lda     _joypad1old
	and     #$80
	bne     L083C
;
; Y_speed = -0x48; // 0xc8
;
	lda     #$B8
	sta     _Y_speed
;
; if (collision > 0)
;
	lda     _collision
	beq     L083C
;
; audioBeep();
;
	jsr     _audioBeep
;
; if (X_speed >= 0)
;
L083C:	ldx     _X_speed
	bmi     L06A9
;
; if (X_speed > 0x20)
;
	lda     _X_speed
	sec
	sbc     #$21
	bvs     L06AF
	eor     #$80
L06AF:	bpl     L083D
;
; X_speed = 0x20;
;
	lda     #$20
;
; else
;
	jmp     L0822
;
; if (X_speed < (-0x20))
;
L06A9:	lda     _X_speed
	sec
	sbc     #$E0
	bvc     L06B7
	eor     #$80
L06B7:	bpl     L083D
;
; X_speed = (-0x20); // 0xe0
;
	lda     #$E0
L0822:	sta     _X_speed
;
; if (Y_speed >= 0)
;
L083D:	ldx     _Y_speed
	bmi     L083E
;
; if (Y_speed > 0x20)
;
	lda     _Y_speed
	sec
	sbc     #$21
	bvs     L06C1
	eor     #$80
L06C1:	bpl     L083E
;
; Y_speed = 0x20;
;
	lda     #$20
	sta     _Y_speed
;
; if (X_speed != 0)
;
L083E:	lda     _X_speed
	jeq     L0706
;
; Horiz_scroll_Old = Horiz_scroll;
;
	lda     _Horiz_scroll
	sta     _Horiz_scroll_Old
;
; Horiz_scroll += (X_speed >> 4); // use the high nibble
;
	ldx     #$00
	lda     _X_speed
	bpl     L06CC
	dex
L06CC:	jsr     asrax4
	clc
	adc     _Horiz_scroll
	sta     _Horiz_scroll
;
; NametableB = Nametable;
;
	lda     _Nametable
	sta     _NametableB
;
; Scroll_Adjusted_X = (X1 + Horiz_scroll + (X_speed < 0 ? 3 : 13)); // left
;
	ldx     #$00
	lda     _X1
	clc
	adc     _Horiz_scroll
	bcc     L081C
	inx
L081C:	sta     ptr1
	stx     ptr1+1
	lda     _X_speed
	asl     a
	bcc     L083F
	lda     #$03
	jmp     L06D6
L083F:	lda     #$0D
L06D6:	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L081D
	inx
L081D:	sta     _Scroll_Adjusted_X
	stx     _Scroll_Adjusted_X+1
;
; high_byte = Scroll_Adjusted_X >> 8;
;
	lda     _Scroll_Adjusted_X+1
	sta     _high_byte
;
; if (high_byte != 0)
;
	lda     _high_byte
	beq     L0841
;
; ++NametableB; // the other nametable's collision map
;
	inc     _NametableB
;
; NametableB &= 1; // keep it 0 or 1
;
	lda     _NametableB
	and     #$01
	sta     _NametableB
;
; collision = 0;                       // if on platform, ++collision
;
	lda     #$00
L0841:	sta     _collision
;
; collision_Index = (((char)Scroll_Adjusted_X >> 4) + ((Y1 + (Y_speed <= 0 ? 31 : 31)) & 0xf0)); //top left if on ground / falling, bottom left if in air
;
	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y_speed
	sec
	sbc     #$01
	bvc     L0823
	eor     #$80
L0823:	lda     #$1F
	clc
	adc     _Y1
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; Collision_Down();
;
	jsr     _Collision_Down
;
; collision_Index = (((char)Scroll_Adjusted_X >> 4) + ((Y1 + 16) & 0xf0)); //top left if on ground / falling, bottom left if in air
;
	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y1
	clc
	adc     #$10
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; Collision_Down();
;
	jsr     _Collision_Down
;
; collision_Index = (((char)Scroll_Adjusted_X >> 4) + ((Y1)&0xf0)); //top left if on ground / falling, bottom left if in air
;
	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y1
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; Collision_Down();
;
	jsr     _Collision_Down
;
; if (collision < 5 && collision > 0)
;
	lda     _collision
	cmp     #$05
	bcs     L0845
	lda     _collision
	beq     L0845
;
; Horiz_scroll = Horiz_scroll_Old;
;
	lda     _Horiz_scroll_Old
	sta     _Horiz_scroll
;
; X_speed = 0;
;
	ldx     #$00
	stx     _X_speed
;
; else
;
	jmp     L0847
;
; if (X_speed >= 0)
;
L0845:	ldx     _X_speed
	bmi     L0707
;
; if (Horiz_scroll_Old > Horiz_scroll) // if pass 0, switch nametables
;
	lda     _Horiz_scroll_Old
	sec
	sbc     _Horiz_scroll
	bcc     L0846
	beq     L0846
;
; else
;
	jmp     L0850
;
; if (Horiz_scroll_Old < Horiz_scroll)
;
L0707:	lda     _Horiz_scroll_Old
	cmp     _Horiz_scroll
	bcs     L0846
;
; ++Nametable; // if pass 0, switch nametables
;
L0850:	inc     _Nametable
;
; Nametable &= 1; // keep it 1 or 0
;
L0846:	lda     _Nametable
	and     #$01
	sta     _Nametable
;
; Y1 += (Y_speed >> 4); // use the high nibble
;
L0706:	ldx     #$00
L0847:	lda     _Y_speed
	bpl     L0716
	dex
L0716:	jsr     asrax4
	clc
	adc     _Y1
	sta     _Y1
;
; if (walk_count > 0x1f) // walk_count forced 0-1f
;
	lda     _walk_count
	cmp     #$20
	ldx     #$00
	bcc     L0848
;
; walk_count = 0;
;
	stx     _walk_count
;
; state = Walk_Moves[(walk_count >> 3)]; // if not jumping
;
L0848:	lda     _walk_count
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	txa
	clc
	adc     #>(_Walk_Moves)
	sta     ptr1+1
	ldy     #<(_Walk_Moves)
	lda     (ptr1),y
	sta     _state
;
; if (Y_speed < 0) // negative = jumping
;
	lda     _Y_speed
	asl     a
	bcc     L071F
;
; state = 3;
;
	lda     #$03
	sta     _state
;
; }
;
L071F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Background: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x20; // address of nametable #0 = 0x2000
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(N1); // uncompresses our data
;
	lda     #<(_N1)
	ldx     #>(_N1)
	jsr     _UnRLE
;
; PPU_ADDRESS = 0x24; // address of nametable #1 = 0x2400
;
	lda     #$24
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(N2); // uncompresses our data
;
	lda     #<(_N2)
	ldx     #>(_N2)
	jsr     _UnRLE
;
; memcpy(C_MAP, C1, 240);
;
	lda     #<(_C_MAP)
	ldx     #>(_C_MAP)
	jsr     pushax
	lda     #<(_C1)
	ldx     #>(_C1)
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; memcpy(C_MAP2, C2, 240);
;
	lda     #<(_C_MAP2)
	ldx     #>(_C_MAP2)
	jsr     pushax
	lda     #<(_C2)
	ldx     #>(_C2)
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Title: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x20; // address of nametable #0 = 0x2000
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(Title); // uncompresses our data
;
	lda     #<(_Title)
	ldx     #>(_Title)
	jsr     _UnRLE
;
; PPU_ADDRESS = 0x24; // draw the HUD on opposite nametable
;
	lda     #$24
	sta     $2006
;
; PPU_ADDRESS = 0x64;
;
	lda     #$64
	sta     $2006
;
; for (index = 0; index < sizeof(HUD); ++index)
;
	lda     #$00
	sta     _index
L0851:	lda     _index
	cmp     #$07
	bcs     L0852
;
; PPU_DATA = HUD[index];
;
	ldy     _index
	lda     _HUD,y
	sta     $2007
;
; for (index = 0; index < sizeof(HUD); ++index)
;
	inc     _index
	jmp     L0851
;
; PPU_ADDRESS = 0x24;
;
L0852:	lda     #$24
	sta     $2006
;
; PPU_ADDRESS = 0x74;
;
	lda     #$74
	sta     $2006
;
; for (index = 0; index < sizeof(HUD); ++index)
;
	lda     #$00
	sta     _index
L0853:	lda     _index
	cmp     #$07
	bcs     L0854
;
; PPU_DATA = HUD2[index];
;
	ldy     _index
	lda     _HUD2,y
	sta     $2007
;
; for (index = 0; index < sizeof(HUD); ++index)
;
	inc     _index
	jmp     L0853
;
; PPU_ADDRESS = 0x27;
;
L0854:	lda     #$27
	sta     $2006
;
; PPU_ADDRESS = 0xc0;
;
	lda     #$C0
	sta     $2006
;
; for (index = 0; index < 8; ++index)
;
	lda     #$00
	sta     _index
L0855:	lda     _index
	cmp     #$08
	bcs     L07E4
;
; PPU_DATA = 0xff;
;
	lda     #$FF
	sta     $2007
;
; for (index = 0; index < 8; ++index)
;
	inc     _index
	jmp     L0855
;
; }
;
L07E4:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setupAudio (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setupAudio: near

.segment	"CODE"

;
; *((unsigned char*)0x4015) = 0x0f;
;
	lda     #$0F
	sta     $4015
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ audioUpdate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_audioUpdate: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ audioBeep (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_audioBeep: near

.segment	"CODE"

;
; if ((joypad1 & A_BUTTON) != 0){
;
	lda     _joypad1
	and     #$80
	beq     L03D6
;
; *((unsigned char*)0x4000) = 0x0f;
;
	lda     #$0F
	sta     $4000
;
; *((unsigned char*)0x4003) = 0x01;
;
	lda     #$01
	sta     $4003
;
; }
;
L03D6:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ playScale (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playScale: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Buffer_Tiles (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Buffer_Tiles: near

.segment	"CODE"

;
; index = 2;  // will be skipping the top 2 metatiles, it's the HUD
;
	lda     #$02
	sta     _index
;
; index2 = 0;
;
	lda     #$00
	sta     _index2
;
; index3 = 0;
;
	tax
	sta     _index3
;
; while (index < 15){ 
;
	jmp     L085B
;
; if (Nametable_Plus == 0){ // drawing to the opposite screen that we're on
;
L0858:	lda     _Nametable_Plus
	bne     L0859
;
; temp = C_MAP2[(Horiz_scroll_Plus>>4) + (index<<4)]; // get the metatile
;
	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP2)
	sta     ptr1+1
	ldy     #<(_C_MAP2)
;
; else{
;
	jmp     L085C
;
; temp = C_MAP[(Horiz_scroll_Plus>>4) + (index<<4)]; // get the metatile
;
L0859:	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP)
	sta     ptr1+1
	ldy     #<(_C_MAP)
L085C:	lda     (ptr1),y
	sta     _temp
;
; temp3 = MT_color[temp]; // get color, store temp
;
	ldy     _temp
	lda     _MT_color,y
	sta     _temp3
;
; temp <<= 2; // x 4
;
	lda     _temp
	asl     a
	asl     a
	sta     _temp
;
; BUFFER1[index2] = METATILES[temp]; // get the tl tile
;
	lda     #<(_BUFFER1)
	ldx     #>(_BUFFER1)
	clc
	adc     _index2
	bcc     L0401
	inx
L0401:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	inc     _temp
;
; BUFFER2[index2] = METATILES[temp]; // get the tr tile
;
	lda     #<(_BUFFER2)
	ldx     #>(_BUFFER2)
	clc
	adc     _index2
	bcc     L0408
	inx
L0408:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	inc     _temp
;
; ++index2;
;
	inc     _index2
;
; BUFFER1[index2] = METATILES[temp]; // get the bl tile
;
	lda     #<(_BUFFER1)
	ldx     #>(_BUFFER1)
	clc
	adc     _index2
	bcc     L0410
	inx
L0410:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	inc     _temp
;
; BUFFER2[index2] = METATILES[temp]; // get the br tile
;
	lda     #<(_BUFFER2)
	ldx     #>(_BUFFER2)
	clc
	adc     _index2
	bcc     L0417
	inx
L0417:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	inc     _temp
;
; ++index2;
;
	inc     _index2
;
; ++index; // next round, difference is attribute table stuff
;
	inc     _index
;
; if (Nametable_Plus == 0){ // read from 2nd map
;
	ldx     #$00
	lda     _Nametable_Plus
	bne     L085A
;
; temp = C_MAP2[(Horiz_scroll_Plus>>4) + (index<<4)]; // get the metatile
;
	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP2)
	sta     ptr1+1
	ldy     #<(_C_MAP2)
;
; else{
;
	jmp     L085D
;
; temp = C_MAP[(Horiz_scroll_Plus>>4) + (index<<4)]; // get the metatile
;
L085A:	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP)
	sta     ptr1+1
	ldy     #<(_C_MAP)
L085D:	lda     (ptr1),y
	sta     _temp
;
; temp3 += (MT_color[temp] << 4); // get color, store temp
;
	ldy     _temp
	lda     _MT_color,y
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     _temp3
	sta     _temp3
;
; BUFFER5[index3] = temp3;
;
	ldy     _index3
	lda     _temp3
	sta     _BUFFER5,y
;
; temp <<= 2; // x 4
;
	lda     _temp
	asl     a
	asl     a
	sta     _temp
;
; BUFFER1[index2] = METATILES[temp]; // get the tl tile
;
	lda     #<(_BUFFER1)
	ldx     #>(_BUFFER1)
	clc
	adc     _index2
	bcc     L0438
	inx
L0438:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	inc     _temp
;
; BUFFER2[index2] = METATILES[temp]; // get the tr tile
;
	lda     #<(_BUFFER2)
	ldx     #>(_BUFFER2)
	clc
	adc     _index2
	bcc     L043F
	inx
L043F:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	inc     _temp
;
; ++index2;
;
	inc     _index2
;
; BUFFER1[index2] = METATILES[temp]; // get the bl tile
;
	lda     #<(_BUFFER1)
	ldx     #>(_BUFFER1)
	clc
	adc     _index2
	bcc     L0447
	inx
L0447:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	inc     _temp
;
; BUFFER2[index2] = METATILES[temp]; // get the br tile
;
	lda     #<(_BUFFER2)
	ldx     #>(_BUFFER2)
	clc
	adc     _index2
	bcc     L044E
	inx
L044E:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index2;
;
	inc     _index2
;
; ++index3;
;
	inc     _index3
;
; ++index;
;
	inc     _index
;
; while (index < 15){ 
;
	ldx     #$00
L085B:	lda     _index
	cmp     #$0F
	jcc     L0858
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Buffer_Tiles2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Buffer_Tiles2: near

.segment	"CODE"

;
; index = 2; // will be skipping the top 2 metatiles, later
;
	lda     #$02
	sta     _index
;
; index2 = 0;
;
	lda     #$00
	sta     _index2
;
; index3 = 0;
;
	tax
	sta     _index3
;
; while (index < 15){
;
	jmp     L0864
;
; if (Nametable_Plus == 0){ // drawing to the opposite screen that we're on
;
L0861:	lda     _Nametable_Plus
	bne     L0862
;
; temp = C_MAP2[(Horiz_scroll_Plus>>4) + (index<<4)]; // get the mt
;
	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP2)
	sta     ptr1+1
	ldy     #<(_C_MAP2)
;
; else{
;
	jmp     L0866
;
; temp = C_MAP[(Horiz_scroll_Plus>>4) + (index<<4)]; // get the mt
;
L0862:	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP)
	sta     ptr1+1
	ldy     #<(_C_MAP)
L0866:	lda     (ptr1),y
	sta     _temp
;
; temp3 = MT_color[temp]; // get palette #, store temp3
;
	ldy     _temp
	lda     _MT_color,y
	sta     _temp3
;
; temp <<= 2; // x 4
;
	lda     _temp
	asl     a
	asl     a
	sta     _temp
;
; BUFFER3[index2] = METATILES[temp]; // get the tl tile
;
	lda     #<(_BUFFER3)
	ldx     #>(_BUFFER3)
	clc
	adc     _index2
	bcc     L0475
	inx
L0475:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	inc     _temp
;
; BUFFER4[index2] = METATILES[temp]; // get the tr tile
;
	lda     #<(_BUFFER4)
	ldx     #>(_BUFFER4)
	clc
	adc     _index2
	bcc     L047C
	inx
L047C:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	inc     _temp
;
; ++index2;
;
	inc     _index2
;
; BUFFER3[index2] = METATILES[temp]; // get the bl tile
;
	lda     #<(_BUFFER3)
	ldx     #>(_BUFFER3)
	clc
	adc     _index2
	bcc     L0484
	inx
L0484:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	inc     _temp
;
; BUFFER4[index2] = METATILES[temp]; // get the br tile
;
	lda     #<(_BUFFER4)
	ldx     #>(_BUFFER4)
	clc
	adc     _index2
	bcc     L048B
	inx
L048B:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	inc     _temp
;
; ++index2;
;
	inc     _index2
;
; ++index; // next round, difference is attribute table stuff
;
	inc     _index
;
; if (Nametable_Plus == 0){ // read from 2nd map
;
	ldx     #$00
	lda     _Nametable_Plus
	bne     L0863
;
; temp = C_MAP2[(Horiz_scroll_Plus>>4) + (index<<4)]; // get the mt
;
	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP2)
	sta     ptr1+1
	ldy     #<(_C_MAP2)
;
; else{
;
	jmp     L0867
;
; temp = C_MAP[(Horiz_scroll_Plus>>4) + (index<<4)]; // get the mt
;
L0863:	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP)
	sta     ptr1+1
	ldy     #<(_C_MAP)
L0867:	lda     (ptr1),y
	sta     _temp
;
; temp3 += (MT_color[temp] << 4); // get palette #, store temp3
;
	ldy     _temp
	lda     _MT_color,y
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     _temp3
	sta     _temp3
;
; BUFFER6[index3] = temp3 << 2;
;
	lda     #<(_BUFFER6)
	ldx     #>(_BUFFER6)
	clc
	adc     _index3
	bcc     L04A6
	inx
L04A6:	sta     ptr1
	stx     ptr1+1
	lda     _temp3
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr1),y
;
; temp <<= 2; // x 4
;
	lda     _temp
	asl     a
	asl     a
	sta     _temp
;
; BUFFER3[index2] = METATILES[temp]; // get the tl tile
;
	lda     #<(_BUFFER3)
	ldx     #>(_BUFFER3)
	clc
	adc     _index2
	bcc     L04AC
	inx
L04AC:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	inc     _temp
;
; BUFFER4[index2] = METATILES[temp]; // get the tr tile
;
	lda     #<(_BUFFER4)
	ldx     #>(_BUFFER4)
	clc
	adc     _index2
	bcc     L04B3
	inx
L04B3:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	inc     _temp
;
; ++index2;
;
	inc     _index2
;
; BUFFER3[index2] = METATILES[temp]; // get the bl tile
;
	lda     #<(_BUFFER3)
	ldx     #>(_BUFFER3)
	clc
	adc     _index2
	bcc     L04BB
	inx
L04BB:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	inc     _temp
;
; BUFFER4[index2] = METATILES[temp]; // get the br tile
;
	lda     #<(_BUFFER4)
	ldx     #>(_BUFFER4)
	clc
	adc     _index2
	bcc     L04C2
	inx
L04C2:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index2;
;
	inc     _index2
;
; ++index3;
;
	inc     _index3
;
; ++index;
;
	inc     _index
;
; while (index < 15){
;
	ldx     #$00
L0864:	lda     _index
	cmp     #$0F
	jcc     L0861
;
; for (index=0;index<8;++index){
;
	stx     _index
L0865:	lda     _index
	cmp     #$08
	bcs     L04CA
;
; BUFFER7[index] = BUFFER5[index] + BUFFER6[index]; 
;
	lda     #<(_BUFFER7)
	ldx     #>(_BUFFER7)
	clc
	adc     _index
	bcc     L04D3
	inx
L04D3:	sta     sreg
	stx     sreg+1
	ldy     _index
	lda     _BUFFER5,y
	sta     ptr1
	ldy     _index
	lda     _BUFFER6,y
	clc
	adc     ptr1
	ldy     #$00
	sta     (sreg),y
;
; for (index=0;index<8;++index){
;
	inc     _index
	jmp     L0865
;
; }
;
L04CA:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; All_Off();
;
	jsr     _All_Off
;
; Draw_Title();
;
	jsr     _Draw_Title
;
; joypad1 = 0xff; // fix a bug, reset is wiping joypad1old
;
	lda     #$FF
	sta     _joypad1
;
; Load_Palette();
;
	jsr     _Load_Palette
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; setupAudio();
;
	jsr     _setupAudio
;
; Wait_Vblank();
;
	jsr     _Wait_Vblank
;
; All_On();
;
	jsr     _All_On
;
; while (Game_Mode == TITLE_MODE)
;
	jmp     L086E
;
; while (NMI_flag == 0)
;
L0868:	lda     _NMI_flag
	beq     L0868
;
; Rotate_Palette();
;
	jsr     _Rotate_Palette
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; Get_Input();
;
	jsr     _Get_Input
;
; if (((joypad1old & START) == 0) && ((joypad1 & START) != 0))
;
	lda     _joypad1old
	and     #$10
	bne     L0873
	lda     _joypad1
	and     #$10
	beq     L0874
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; while (NMI_flag == 0)
;
L086B:	lda     _NMI_flag
	beq     L086B
;
; All_Off();
;
	jsr     _All_Off
;
; Game_Mode = RUN_GAME_MODE;
;
	lda     #$01
	sta     _Game_Mode
;
; Draw_Background();
;
	jsr     _Draw_Background
;
; X1 = 0x80;
;
	lda     #$80
	sta     _X1
;
; Y1 = 0x70; // middle of screen
;
	lda     #$70
	sta     _Y1
;
; Load_Palette();
;
	jsr     _Load_Palette
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; Wait_Vblank();
;
	jsr     _Wait_Vblank
;
; PPU_CTRL = 0x91;
;
	lda     #$91
	sta     $2000
;
; NMI_flag = 0;
;
L0873:	lda     #$00
L0874:	sta     _NMI_flag
;
; while (Game_Mode == TITLE_MODE)
;
L086E:	lda     _Game_Mode
	beq     L0868
;
; while (Game_Mode == RUN_GAME_MODE)
;
	jmp     L0872
;
; while (NMI_flag == 0)
;
L086F:	lda     _NMI_flag
	beq     L086F
;
; if (PPU_flag != 0)
;
	lda     _PPU_flag
	beq     L0870
;
; Do_Buffer2();
;
	jsr     _Do_Buffer2
;
; PPU_CTRL = 0x94;
;
L0870:	lda     #$94
	sta     $2000
;
; SCROLL = 0;
;
	lda     #$00
	sta     $2005
;
; SCROLL = 0; // resetting scroll position, again
;
	sta     $2005
;
; if (PPU_flag2 != 0)
;
	lda     _PPU_flag2
	beq     L0871
;
; Do_Buffer3();
;
	jsr     _Do_Buffer3
;
; PPU_CTRL = 0x94;
;
L0871:	lda     #$94
	sta     $2000
;
; SCROLL = 0;
;
	lda     #$00
	sta     $2005
;
; SCROLL = 0; // resetting scroll position, again
;
	sta     $2005
;
; Get_Input();
;
	jsr     _Get_Input
;
; PPU_flag = 0;
;
	lda     #$00
	sta     _PPU_flag
;
; PPU_flag2 = 0;
;
	sta     _PPU_flag2
;
; SPRITE_ZERO[1] = 0xff; // switch tiles to a very small one
;
	lda     #$FF
	sta     _SPRITE_ZERO+1
;
; SPRITE_ZERO[2] = 0x20; // attributes = behind the bg
;
	lda     #$20
	sta     _SPRITE_ZERO+2
;
; Sprite_Zero();
;
	jsr     _Sprite_Zero
;
; SCROLL = Horiz_scroll;
;
	lda     _Horiz_scroll
	sta     $2005
;
; SCROLL = 0; // setting the new scroll position
;
	lda     #$00
	sta     $2005
;
; PPU_CTRL = (0x94 + Nametable);
;
	lda     _Nametable
	clc
	adc     #$94
	sta     $2000
;
; move_logic();
;
	jsr     _move_logic
;
; audioUpdate();
;
	jsr     _audioUpdate
;
; update_Sprites();
;
	jsr     _update_Sprites
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; while (Game_Mode == RUN_GAME_MODE)
;
L0872:	lda     _Game_Mode
	cmp     #$01
	beq     L086F
;
; while (1)
;
	jmp     L086E

.endproc

; ---------------------------------------------------------------
; void __near__ Do_Buffer (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Do_Buffer: near

.segment	"CODE"

;
; Buffer_Tiles();
;
	jsr     _Buffer_Tiles
;
; Horiz_scroll_Plus += 0x10;
;
	lda     #$10
	clc
	adc     _Horiz_scroll_Plus
	sta     _Horiz_scroll_Plus
;
; Buffer_Tiles2();
;
	jsr     _Buffer_Tiles2
;
; Horiz_scroll_Plus -= 0x10;
;
	lda     _Horiz_scroll_Plus
	sec
	sbc     #$10
	sta     _Horiz_scroll_Plus
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Set_Sprite_Zero (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Set_Sprite_Zero: near

.segment	"CODE"

;
; SPRITE_ZERO[0] = 0x16; // y
;
	lda     #$16
	sta     _SPRITE_ZERO
;
; SPRITE_ZERO[1] = 0x30; // tile
;
	lda     #$30
	sta     _SPRITE_ZERO+1
;
; SPRITE_ZERO[2] = 0;  // attributes
;
	lda     #$00
	sta     _SPRITE_ZERO+2
;
; SPRITE_ZERO[3] = 0xd0; // x
;
	lda     #$D0
	sta     _SPRITE_ZERO+3
;
; }
;
	rts

.endproc

